// cargo clean && LIBCLANG_PATH="/usr/lib/llvm-3.5/lib" cargo build && LD_LIBRARY_PATH="/tmp/rust-bindgen/target/" /tmp/rust-bindgen/target/bindgen

/* automatically generated by rust-bindgen */

pub type Number = ::libc::c_double;
pub type Index = ::libc::c_int;
pub type Int = ::libc::c_int;
pub type Enum_ApplicationReturnStatus = ::libc::c_int;
pub const Solve_Succeeded: ::libc::c_int = 0;
pub const Solved_To_Acceptable_Level: ::libc::c_int = 1;
pub const Infeasible_Problem_Detected: ::libc::c_int = 2;
pub const Search_Direction_Becomes_Too_Small: ::libc::c_int = 3;
pub const Diverging_Iterates: ::libc::c_int = 4;
pub const User_Requested_Stop: ::libc::c_int = 5;
pub const Feasible_Point_Found: ::libc::c_int = 6;
pub const Maximum_Iterations_Exceeded: ::libc::c_int = -1;
pub const Restoration_Failed: ::libc::c_int = -2;
pub const Error_In_Step_Computation: ::libc::c_int = -3;
pub const Maximum_CpuTime_Exceeded: ::libc::c_int = -4;
pub const Not_Enough_Degrees_Of_Freedom: ::libc::c_int = -10;
pub const Invalid_Problem_Definition: ::libc::c_int = -11;
pub const Invalid_Option: ::libc::c_int = -12;
pub const Invalid_Number_Detected: ::libc::c_int = -13;
pub const Unrecoverable_Exception: ::libc::c_int = -100;
pub const NonIpopt_Exception_Thrown: ::libc::c_int = -101;
pub const Insufficient_Memory: ::libc::c_int = -102;
pub const Internal_Error: ::libc::c_int = -199;
pub type Enum_AlgorithmMode = ::libc::c_uint;
pub const RegularMode: ::libc::c_uint = 0;
pub const RestorationPhaseMode: ::libc::c_uint = 1;
pub enum Struct_IpoptProblemInfo { }
pub type IpoptProblem = *mut Struct_IpoptProblemInfo;
pub type Bool = ::libc::c_int;
pub type UserDataPtr = *mut ::libc::c_void;
pub type Eval_F_CB =
    ::std::option::Option<extern "C" fn
                              (n: Index, x: *mut Number, new_x: Bool,
                               obj_value: *mut Number, user_data: UserDataPtr)
                              -> Bool>;
pub type Eval_Grad_F_CB =
    ::std::option::Option<extern "C" fn
                              (n: Index, x: *mut Number, new_x: Bool,
                               grad_f: *mut Number, user_data: UserDataPtr)
                              -> Bool>;
pub type Eval_G_CB =
    ::std::option::Option<extern "C" fn
                              (n: Index, x: *mut Number, new_x: Bool,
                               m: Index, g: *mut Number,
                               user_data: UserDataPtr) -> Bool>;
pub type Eval_Jac_G_CB =
    ::std::option::Option<extern "C" fn
                              (n: Index, x: *mut Number, new_x: Bool,
                               m: Index, nele_jac: Index, iRow: *mut Index,
                               jCol: *mut Index, values: *mut Number,
                               user_data: UserDataPtr) -> Bool>;
pub type Eval_H_CB =
    ::std::option::Option<extern "C" fn
                              (n: Index, x: *mut Number, new_x: Bool,
                               obj_factor: Number, m: Index,
                               lambda: *mut Number, new_lambda: Bool,
                               nele_hess: Index, iRow: *mut Index,
                               jCol: *mut Index, values: *mut Number,
                               user_data: UserDataPtr) -> Bool>;
pub type Intermediate_CB =
    ::std::option::Option<extern "C" fn
                              (alg_mod: Index, iter_count: Index,
                               obj_value: Number, inf_pr: Number,
                               inf_du: Number, mu: Number, d_norm: Number,
                               regularization_size: Number, alpha_du: Number,
                               alpha_pr: Number, ls_trials: Index,
                               user_data: UserDataPtr) -> Bool>;

#[link(name = "ipopt")]
extern "C" {
    pub fn CreateIpoptProblem(n: Index, x_L: *mut Number, x_U: *mut Number,
                              m: Index, g_L: *mut Number, g_U: *mut Number,
                              nele_jac: Index, nele_hess: Index,
                              index_style: Index, eval_f: Eval_F_CB,
                              eval_g: Eval_G_CB, eval_grad_f: Eval_Grad_F_CB,
                              eval_jac_g: Eval_Jac_G_CB, eval_h: Eval_H_CB)
     -> IpoptProblem;
    pub fn FreeIpoptProblem(ipopt_problem: IpoptProblem) -> ();
    pub fn AddIpoptStrOption(ipopt_problem: IpoptProblem,
                             keyword: *mut ::libc::c_char,
                             val: *mut ::libc::c_char) -> Bool;
    pub fn AddIpoptNumOption(ipopt_problem: IpoptProblem,
                             keyword: *mut ::libc::c_char, val: Number)
     -> Bool;
    pub fn AddIpoptIntOption(ipopt_problem: IpoptProblem,
                             keyword: *mut ::libc::c_char, val: Int) -> Bool;
    pub fn OpenIpoptOutputFile(ipopt_problem: IpoptProblem,
                               file_name: *mut ::libc::c_char,
                               print_level: Int) -> Bool;
    pub fn SetIpoptProblemScaling(ipopt_problem: IpoptProblem,
                                  obj_scaling: Number, x_scaling: *mut Number,
                                  g_scaling: *mut Number) -> Bool;
    pub fn SetIntermediateCallback(ipopt_problem: IpoptProblem,
                                   intermediate_cb: Intermediate_CB) -> Bool;
    pub fn IpoptSolve(ipopt_problem: IpoptProblem, x: *mut Number,
                      g: *mut Number, obj_val: *mut Number,
                      mult_g: *mut Number, mult_x_L: *mut Number,
                      mult_x_U: *mut Number, user_data: UserDataPtr)
     -> Enum_ApplicationReturnStatus;
}
